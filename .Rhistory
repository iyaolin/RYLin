drv = RPresto::Presto(),
host = hostip,
port = c$port,
user = c$user,
password = c$password,
schema = c$schema,
catalog = c$catalog
)
}
db <- connect_presto()
BDI::dbGetQuery(db, 'select 787')
DBI::dbGetQuery(db, 'select 787')
schema_name = NA_character_
is.na(schema_name)
c$schema
schema_name
library(RYLin)
devtools::install_github()
devtools::install_github('iyaolin/RYLin')
library(RYLin)
update_RYLin()
con <- connect_presto()
DBI::dbGetQuery('select 10*23')
DBI::dbGetQuery("select 10*23")
DBI::dbGetQuery("select 1023")
DBI::dbGetQuery(con, "select 1023")
load_packages()
connect_enver <- function(
c <- config::get(config = 'enver', file = '~/config.yml')
)
c <- config::get(config = 'enver', file = '~/config.yml')
c <- config::get(config = 'enver', file = '~/config.yml')
c
pool <- pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
install.packages("RPostgreSQL")
library(pool)
pool <- pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
pool %>%
tbl(enver_daily_report) %>%
head(5)
pool %>%
tbl(enver_daily_report) %>%
head(5)
pool
pool %>%
tbl('enver_daily_report') %>%
head(5)
pool %>%
tbl('enver_daily_report') %>%
filter(lang = 1 & tdate >= '2018-07-01' & product_category = -1) %>%
select(tdate, cnt_finish_order)
pool %>%
tbl('enver_daily_report') %>%
filter(lang = 1 & tdate >= '2018-07-01' & product_category = -1) %>%
head(5)
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1) %>%
head(5)
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1 & city_id == 'all') %>%
# head(5)
select(tdate, cnt_finish_order)
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1 & city_id == 'all') %>%
# head(5)
select(tdate, cnt_finish_order) %>%
arange(desc(tdate))
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1 & city_id == 'all') %>%
# head(5)
select(tdate, cnt_finish_order) %>%
arrange(desc(tdate))
connect_enver <- function(db_type = "dbi"){
c <- config::get(config = 'enver', file = '~/config.yml')
# pool <- pool::dbPool(
#   drv = RPostgreSQL::PostgreSQL(),
#   dbname = c$dbname,
#   host = c$host,
#   user = c$user,
#   password = c$password
# )
if (db_type == "dbi") {
DBI::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
} else {
pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
}
}
connect_enver <- function(db_type = "dbi"){
c <- config::get(config = 'enver', file = '~/config.yml')
# pool <- pool::dbPool(
#   drv = RPostgreSQL::PostgreSQL(),
#   dbname = c$dbname,
#   host = c$host,
#   user = c$user,
#   password = c$password
# )
if (db_type == "dbi") {
DBI::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
} else {
pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
}
}
con <- connect_enver()
DBI::dbGetQuery(con, 'select 787')
library(RYLin)
devtools::install_github("laresbernardo/lares")
devtools::install_github("laresbernardo/lares")
?install_github
devtools::install_github("iyaolin/RYLin")
getwd()
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
createDataPartition
?createDataPartition
install.packages('CausalImpact')
y <- exp(-1* t / 500)
x <- 1:100
y <- exp(-1* t / 500)
exp(2)
exp(-2)
y <- exp(-1 * t / 500)
y <- exp(-1 * x / 500)
y
plot(x, y)
plot(x, y, type = '-')
plot(x, y, type = '-')
plot(x, y, type = 'line')
x <- 1:1000
y <- exp(-1 * x / 500)
plot(x, y, type = 'line')
y <- exp(-1 * x / 500)
y1 <- exp(-1 * x / 50)
plot(x, y, type = 'line')
plot(x, y1, type = 'line', color = 'red')
install.packages('sparkr')
type(0.3)
class(0.3)
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / cnt, 6)]
setorder(t, -nacnt)
t <- t[prop >= na_prop]
t
}
show_na_info(iris)
library(data.table)
show_na_info(iris)
t[, prop := round(nacnt / totalcnt, 6)]
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
setorder(t, -nacnt)
t <- t[prop >= na_prop]
t
}
t[, prop := round(nacnt / totalcnt, 6)]
df <- iris
na_prop = 0.0
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t
t[, prop := round(nacnt / totalcnt, 6)]
setorder(t, -nacnt)
t
t[prop >= na_prop]
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
setorder(t, -nacnt)
t[prop >= na_prop]
}
show_na_info(iris)
t[prop >= na_prop][order(-col)]
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
library(flights)
library('nycflights13')
library(YLin)
library(devtools)
devtools::install_github('iyaolin/YLin')
library(RYLin)
load_packages()
library(RYLin)
suppressMessages(load_packages())
load_packages('nycflights')
load_packages('nycflights13')
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
show_na_info(flights)
dim(flights)
apply(flights, 2,function(x) sum(is.na(x)))
is.na(iris)
t <- is.na(flights)
apply(t, MARGIN = 2, sum)
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
show_na_info2 <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(flights), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
load_packages('microbench')
load_packages('microbenchmark')
microbenchmark(show_na_info(flights), show_na_info2(flights))
microbenchmark(show_na_info(flights), show_na_info2(flights), times = 1)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(flights), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(flights)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(flights), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(flights)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
total_cnt = nrow(df),
na_cnt = apply(is.na(df), MARGIN = 2, sum))
t[, prop := round(na_cnt / total_cnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(flights)
dt <- data.table(c(1:4, NA), 11:15)
dt
dt <- data.table(c(1,1,1,2, NA), 11:15)
dt
t
df <- dt
df
col.name <- V1
col.name <- 'V1'
default.cat = 'None'
default.num = 0L
t <- df[, get(col.name)]
t
is.numeric(t)
ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
is.na(default.num)
median(t, na.rm = TRUE)
is.na(default.num)
fillNAs <- function(df, col.name, default.cat = 'None', default.num = NA){
t <- df[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
df[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs(dt)
fillNAs(dt, 'V1')
dt
dt
document()
warnings()
library(RYLin)
warnings()
warnings()
glimpse
?glimpse
glimpse(flights)
str(flights)
library(classInt)
?classInt
library(RYLin)
document()
document()
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(iris)
RYLin::showNAInfo(iris)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(iris)
library(RYLin)
showNAInfo(iris)
RYLin::showNAInfo(iris)
updateRYLin()
install_github('iyaolin/RYLin')
RYLin::showNAInfo
RYLin::showNAInfo(iris)
updateRYLin()
showNAInfo
RYLin::showNAInfo
RYLin::showNAInfo(iris)
RYLin::showNAInfo
library(RYLin)
RYLin::showNAInfo(iris)
df <- iris
na.prop = 0.0
tmp <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
tmp[, ':='(round(nacnt / totalcnt, 6))]
tmp[, ':='(prop = round(nacnt / totalcnt, 6))]
tmp[prop >= na.prop][order(-prop)]
message(class(tmp))
return(tmp)
library(RYLin)
RYLin::showNAInfo
RYLin::showNAInfo
RYLin::showNAInfo(iris)
tmp$prop <- round(nacnt / totalcnt, 6)
tmp$prop <- round(tmp$nacnt / tmp$totalcnt, 6)
library(RYLin)
RYLin::showNAInfo(iris)
library(RYLin)
RYLin::showNAInfo(iris)
warnings()
library(RYLin)
RYLin::showNAInfo(iris)
fillNAs(iris, 'Sepal.Length')
fillNAs <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs(iris, 'Sepal.Length')
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs2(iris, 'Sepal.Length')
showNAInfo2 <- function(df, na.prop = 0.0){
tmp <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
tmp$prop <- round(tmp$nacnt / tmp$totalcnt, 6)
message(print(tmp))
tmp <- as.data.table(tmp)
message(class(tmp))
# tmp[, ':='(prop = round(nacnt / totalcnt, 6))]
tmp[prop >= na.prop][order(-prop)]
message(class(tmp))
return(tmp)
}
showNAInfo2(iris)
fillNAs2(iris)
fillNAs2(iris, 'col')
fillNAs(as.data.table(iris), 'col')
t <- as.data.table(iris)
t
t[1:5, Species := NA]
fillNAs2(, t, 'Species', 'yaolin')
fillNAs2(t, 'Species', 'yaolin')
t
t
t
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
return(dt)
}
fillNAs2(t, 'Species', 'yaolin')
t
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
message(class(dt))
return(dt)
}
fillNAs2(t, 'Species', 'yaolin')
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
message(class(dt))
return(copy(dt))
}
fillNAs2(t, 'Species', 'yaolin')
fn <- "z"
class(dt[[fn]])
dt
dt <- data.table (x=c(1,2,3,4), y=c("y","n","y","m"), z=c("pickle",3,8,"egg"))
class(dt[[fn]])
setFactor <- function(DT, col) {
#change the column type by reference
DT[, c(col) := factor(DT[[col]])]
invisible(NULL)
}
setFactor(dt, fn)
class(dt[[fn]])
dt <- data.table (x=c(1,2,3,4), y=c("y","n","y","m"), z=c("pickle",3,8,"egg"))
class(dt[[fn]])
setFactor <- function(DT, col) {
#change the column type by reference
DT[, (col) := factor(get(col))]
invisible(NULL)
}
setFactor(dt, fn)
DT <- dt
col <- 'z'
DT[, factor(get(col))]
DT[, get(col)]
DT[, col]
DT
col
DT[, (col)]
DT[, get(col)]
col <- 'x'
DT[, get(col)]
DT[, col]
DT[, (col)]
dt[, x]
fn <- 'x'
dt[, (fn)]
dt[, get(fn)]
dt[, data.table::get(fn)]
