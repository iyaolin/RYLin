t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
setorder(t, -nacnt)
t[prop >= na_prop]
}
show_na_info(iris)
t[prop >= na_prop][order(-col)]
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
library(flights)
library('nycflights13')
library(YLin)
library(devtools)
devtools::install_github('iyaolin/YLin')
library(RYLin)
load_packages()
library(RYLin)
suppressMessages(load_packages())
load_packages('nycflights')
load_packages('nycflights13')
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
show_na_info(flights)
dim(flights)
apply(flights, 2,function(x) sum(is.na(x)))
is.na(iris)
t <- is.na(flights)
apply(t, MARGIN = 2, sum)
show_na_info <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(df, MARGIN = 2, function(x) sum(is.na(x))))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
show_na_info2 <- function(df, na_prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(flights), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na_prop][order(-prop)]
}
load_packages('microbench')
load_packages('microbenchmark')
microbenchmark(show_na_info(flights), show_na_info2(flights))
microbenchmark(show_na_info(flights), show_na_info2(flights), times = 1)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(flights), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(flights)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(flights), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(flights)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
total_cnt = nrow(df),
na_cnt = apply(is.na(df), MARGIN = 2, sum))
t[, prop := round(na_cnt / total_cnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(flights)
dt <- data.table(c(1:4, NA), 11:15)
dt
dt <- data.table(c(1,1,1,2, NA), 11:15)
dt
t
df <- dt
df
col.name <- V1
col.name <- 'V1'
default.cat = 'None'
default.num = 0L
t <- df[, get(col.name)]
t
is.numeric(t)
ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
is.na(default.num)
median(t, na.rm = TRUE)
is.na(default.num)
fillNAs <- function(df, col.name, default.cat = 'None', default.num = NA){
t <- df[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
df[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs(dt)
fillNAs(dt, 'V1')
dt
dt
document()
warnings()
library(RYLin)
warnings()
warnings()
glimpse
?glimpse
glimpse(flights)
str(flights)
library(classInt)
?classInt
library(RYLin)
document()
document()
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(iris)
RYLin::showNAInfo(iris)
showNAInfo <- function(df, na.prop = 0.0){
t <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
t[, prop := round(nacnt / totalcnt, 6)]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(iris)
library(RYLin)
showNAInfo(iris)
RYLin::showNAInfo(iris)
updateRYLin()
install_github('iyaolin/RYLin')
RYLin::showNAInfo
RYLin::showNAInfo(iris)
updateRYLin()
showNAInfo
RYLin::showNAInfo
RYLin::showNAInfo(iris)
RYLin::showNAInfo
library(RYLin)
RYLin::showNAInfo(iris)
df <- iris
na.prop = 0.0
tmp <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
tmp[, ':='(round(nacnt / totalcnt, 6))]
tmp[, ':='(prop = round(nacnt / totalcnt, 6))]
tmp[prop >= na.prop][order(-prop)]
message(class(tmp))
return(tmp)
library(RYLin)
RYLin::showNAInfo
RYLin::showNAInfo
RYLin::showNAInfo(iris)
tmp$prop <- round(nacnt / totalcnt, 6)
tmp$prop <- round(tmp$nacnt / tmp$totalcnt, 6)
library(RYLin)
RYLin::showNAInfo(iris)
library(RYLin)
RYLin::showNAInfo(iris)
warnings()
library(RYLin)
RYLin::showNAInfo(iris)
fillNAs(iris, 'Sepal.Length')
fillNAs <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs(iris, 'Sepal.Length')
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs2(iris, 'Sepal.Length')
showNAInfo2 <- function(df, na.prop = 0.0){
tmp <- data.table(col = names(df),
totalcnt = nrow(df),
nacnt = apply(is.na(df), MARGIN = 2, sum))
tmp$prop <- round(tmp$nacnt / tmp$totalcnt, 6)
message(print(tmp))
tmp <- as.data.table(tmp)
message(class(tmp))
# tmp[, ':='(prop = round(nacnt / totalcnt, 6))]
tmp[prop >= na.prop][order(-prop)]
message(class(tmp))
return(tmp)
}
showNAInfo2(iris)
fillNAs2(iris)
fillNAs2(iris, 'col')
fillNAs(as.data.table(iris), 'col')
t <- as.data.table(iris)
t
t[1:5, Species := NA]
fillNAs2(, t, 'Species', 'yaolin')
fillNAs2(t, 'Species', 'yaolin')
t
t
t
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
return(dt)
}
fillNAs2(t, 'Species', 'yaolin')
t
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
message(class(dt))
return(dt)
}
fillNAs2(t, 'Species', 'yaolin')
fillNAs2 <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
message(class(dt))
return(copy(dt))
}
fillNAs2(t, 'Species', 'yaolin')
fn <- "z"
class(dt[[fn]])
dt
dt <- data.table (x=c(1,2,3,4), y=c("y","n","y","m"), z=c("pickle",3,8,"egg"))
class(dt[[fn]])
setFactor <- function(DT, col) {
#change the column type by reference
DT[, c(col) := factor(DT[[col]])]
invisible(NULL)
}
setFactor(dt, fn)
class(dt[[fn]])
dt <- data.table (x=c(1,2,3,4), y=c("y","n","y","m"), z=c("pickle",3,8,"egg"))
class(dt[[fn]])
setFactor <- function(DT, col) {
#change the column type by reference
DT[, (col) := factor(get(col))]
invisible(NULL)
}
setFactor(dt, fn)
DT <- dt
col <- 'z'
DT[, factor(get(col))]
DT[, get(col)]
DT[, col]
DT
col
DT[, (col)]
DT[, get(col)]
col <- 'x'
DT[, get(col)]
DT[, col]
DT[, (col)]
dt[, x]
fn <- 'x'
dt[, (fn)]
dt[, get(fn)]
dt[, data.table::get(fn)]
library(data.table)
dt <- data.table (x=c(1,2,3,4), y=c("y","n","y","m"), z=c("pickle",3,8,"egg"))
fn <- 'x'
dt[, get(fn)]
class(dt[[fn]])
setFactor <- function(DT, col) {
#change the column type by reference
DT[, (col) := factor(get(col))]
invisible(NULL)
}
setFactor(dt, fn)
class(dt[[fn]])
str(dt)
showNAInfo <- function(dt, na.prop = 0.0){
t <- data.table(col = names(dt),
totalcnt = nrow(dt),
nacnt = apply(is.na(dt), MARGIN = 2, sum))
t[, ':='(prop = round(nacnt / totalcnt, 6))]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(iris)
dt
dt[1:2, x=NA]
dt[1:2, x:=NA]
dt
str(dt)
fillNAs <- function(dt, col.name, default.cat = 'None', default.num = NA){
t <- dt[, get(col.name)]
if (is.numeric(t)) {
fillvalue <- ifelse(is.na(default.num), median(t, na.rm = TRUE), default.num)
} else {
fillvalue <- ifelse(is.na(default.cat), names(which.max(table(t))), default.cat)
}
dt[is.na(get(col.name)), (col.name) := fillvalue]
}
fillNAs(dt, 'x', '999')
dt
invisible(NULL)
library(RYLin)
dt
dt[1:2, x:=NA]
RYLin::fillNAs(dt, 'x')
RYLin::showNAInfo(dt)
RYLin::showNAInfo(iris)
showNAInfo <- function(dt, na.prop = 0.0){
t <- data.table(col = names(dt),
totalcnt = nrow(dt),
nacnt = apply(is.na(dt), MARGIN = 2, sum))
t[, ':='(prop = round(nacnt / totalcnt, 6))]
t[prop >= na.prop][order(-prop)]
}
showNAInfo(iris)
loadedNamespaces()
library(RYLin)
RYLin::showNAInfo
RYLin::showNAInfo(iris)
methods(':=')
library(data.table)
methods(':=')
methods('[')
methods('[.data.table')
methods('[.data.table*')
method(t)
t
showNAInfo(iris)
RYLin::showNAInfo(iris)
dt <- iris
# if (!'data.table' %in% loadedNamespaces()) {loadPackages('data.table')}
t <- data.table(col = names(dt),
totalcnt = nrow(dt),
nacnt = apply(is.na(dt), MARGIN = 2, sum))
message(print(is.data.table(t) == TRUE))
message(is.data.table(t) == TRUE)
library(RYLin)
RYLin::showNAInfo(iris)
'['(t, nrow)
'['(t, 1:2)
'[.data.table'(t, 1:2)
'[.data.table.'(t, 1:2)
?'['
?data.table
methods(t)
class(t)
library(RYLin)
RYLin::showNAInfo(iris)
type = 'factor'
sprintf('as.%', type)
sprintf('as/.%', type)
sprintf('as%', type)
type = 'factor'
sprintf('as.%', type)
sprintf('as.%s', type)
t <- sprintf('as.%s', type)
eval(t)
expression(t)
t <- sprintf('as.%s(1:10)', type)
t
expression(t)
eval(t)
expression(parse(t))
t <- sprintf('as.%s(1:10)', type)
t
expression(parse("as.factor(1:10)"))
eval(parse("as.factor(1:10)"))
eval(parse(txt="as.factor(1:10)"))
eval(parse(text="5+5"))
eval(parse(text="as.factor(1:10)"))
eval(parse(text=t))
cmdstring <- sprintf("dt[, (col.names) := lapply(.SD, as.%s), .SDcols = col.names]", type)
cmdstring
dt
dt <- dt[1:10]
dt
dt <- dt[1:10, ] %>% as.data.table
dt <- dt[1:10, ] %>% as.data.table
library(magrittr)
dt <- dt[1:10, ] %>% as.data.table
dt
setnames(dt, c('x', 'y', 'z', 'k', 'l'))
dt
col.names <- names(dt)[1:3]
col.names
dt
cmdstring <- sprintf("dt[, (col.names) := lapply(.SD, as.%s), .SDcols = col.names]", type)
eval(parse(text = cmdstring))
str(dt)
install.packages('ggthemes', dependencies = TRUE)
matrix(c(1,1,2,2,3,3,4,4,4,5,5,5),2,6,byrow=TRUE)
install.packages('ggthemes')
t
dt
dt[, .N, keyby = get(col)][, pct := round(.N / sum(N), 3)]
col = 'l'
dt[, .N, keyby = get(col)][, pct := round(.N / sum(N), 3)]
dt
dt[, .N, keyby = get(col)][, pct := round(.N / sum(N), 3)][]
dt[, .N, keyby = get(col)][, pct := sprintf("%.3f", .N / sum(N))][]
viewFeatureTable <- function(dt, col){
dt[, .N, keyby = get(col)][, pct := sprintf("%.3f", .N / sum(N))][]
}
viewSingleVar <- function(dt, col){
dt[, .N, keyby = base::get(col)][, pct := sprintf("%.3f", N / sum(N))][]
}
#' load most frequently used packages
#'
#'
#' @param pkgs packages to be loaded
#' @param install if the package is not installed, install it or not
#'
#' @return vector, if a package is sucessfully loaded
#'
#' @examples
#' load_packages()
#'
#' @export
pkgs_default <- c(
'tidyverse',
'ggplot2',
'ggthemes',
'viridis',
'stringi',
'hrbrthemes',
'lubridate',
'DT',
'scales',
'magrittr',
# 'shiny',
# 'shinydashboard',
# 'shinythemes',
# 'leaflet',
# 'highcharter',
'Hmisc',
'RPresto',
'DBI',
'bit64',
'pool',
'devtools',
'data.table'
)
pkgs_vis <- c("grid", 'gridExtra', 'RColorBrewer', 'corrplot', 'ggforce', 'ggridges')
loadPackages <- function(pkgs = pkgs_default, install = TRUE){
if (install) {
packages_to_install = pkgs[!(pkgs %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
}
sapply(pkgs, require, character.only = TRUE)
}
loadPackages(pkgs_vis)
data.table::merge
library(data.table)
library(data.table)
?merge
(dt1 <- data.table(A = letters[1:10], X = 1:10, key = "A"))
(dt2 <- data.table(A = letters[5:14], Y = 1:10, key = "A"))
merge(dt1, dt2)
d1 <- data.table(a=sample(rep(1:3,each=2)), z=1:6)
d2 <- data.table(a=2:0, z=10:12)
merge(d1, d2, by="a")
data.table::merge
data.table::fread()
data.table::update.dev.pkg(repo="https://gitlab.com/Rdatatable/data.table")
remove.packages("data.table")
install.packages("data.table", type = "source",
repos = "http://Rdatatable.github.io/data.table")
install.packages("data.table", type = "source", repos = "http://Rdatatable.github.io/data.table")
library(data.table)
data.table::getNumericRounding()
data.table::getNumericRounding(3)
data.table::setNumericRounding(3)
