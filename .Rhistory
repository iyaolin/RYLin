# 'leaflet',
# 'highcharter',
'Hmisc',
'RPresto',
'BBI',
'bit64',
'pool'
)
load_packages <- function(pkgs = pkgs_required, skip_install = FALSE){
if (!skip_install) {
packages_to_install = pkgs[!(pkgs %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
}
sapply(pkgs, require, character.only = TRUE)
}
load_packages()
pkgs = pkgs_required
skip_install = FALSE
pkgs_required <- c(
'tidyverse',
'data.table',
'ggplot2',
'viridis',
'stringi',
'hrbrthemes',
'lubridate',
'DT',
'scales',
'magrittr',
# 'shiny',
# 'shinydashboard',
# 'shinythemes',
# 'leaflet',
# 'highcharter',
'Hmisc',
'RPresto',
'BBI',
'bit64',
'pool'
)
load_packages <- function(pkgs = pkgs_required, install = TRUE){
if (install) {
packages_to_install = pkgs[!(pkgs %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
}
sapply(pkgs, require, character.only = TRUE)
}
pkgs = pkgs_required
install = TRUE
instal
install
packages_to_install = pkgs[!(pkgs %in% installed.packages()[, 1])]
packages_to_install
pkgs_required <- c(
'tidyverse',
'data.table',
'ggplot2',
'viridis',
'stringi',
'hrbrthemes',
'lubridate',
'DT',
'scales',
'magrittr',
# 'shiny',
# 'shinydashboard',
# 'shinythemes',
# 'leaflet',
# 'highcharter',
'Hmisc',
'RPresto',
'DBI',
'bit64',
'pool'
)
load_packages <- function(pkgs = pkgs_required, install = TRUE){
if (install) {
packages_to_install = pkgs[!(pkgs %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
}
sapply(pkgs, require, character.only = TRUE)
}
load_packages()
sessionInfo()
install.packages(c("bit", "broom", "callr", "caret", "caTools", "clipr", "CVST", "DataExplorer", "dbplyr", "ddalpha", "dotCall64", "foreign", "fpc", "fst", "ggforce", "ggimage", "ggplotify", "ggthemes", "git2r", "gtools", "htmlTable", "igraph", "iterators", "jomo", "kernlab", "lava", "leaflet", "manipulateWidget", "maptools", "mclust", "Metrics", "mgcv", "mice", "mitml", "ModelMetrics", "modeltools", "nycflights13", "odbc", "openxlsx", "packrat", "pan", "pillar", "plotly", "processx", "progress", "quantreg", "RcppRoll", "recipes", "reprex", "rgdal", "rgeos", "RgoogleMaps", "rjson", "rmarkdown", "robustbase", "rpart.plot", "rticles", "Rttf2pt1", "sf", "sm", "spacetime", "spam", "stringdist", "styler", "survival", "trimcluster", "tseries", "units", "xgboost", "XML", "xts", "yaml", "zoo"))
library(devtools)
document()
document()
roxygen2::roxygenise()
library(RYLin)
library(RYLin)
?RYLin::load_packages
document()
library(RYLin)
?RYLin::load_packages
library(RYLin)
?load_packages
library(RYLin)
?load_packages
??load_packages
library(RYLin)
#' load most frequently used packages
#'
#'
#' @param pkgs packages to be loaded
#' @param install if the package is not installed, install it or not
#'
#' @return vector, if a package is sucessfully loaded
#'
#' @examples
#' load_packages()
#'
#' @export
pkgs_required <- c(
'tidyverse',
'ggplot2',
'viridis',
'stringi',
'hrbrthemes',
'lubridate',
'DT',
'scales',
'magrittr',
# 'shiny',
# 'shinydashboard',
# 'shinythemes',
# 'leaflet',
# 'highcharter',
'Hmisc',
'RPresto',
'DBI',
'bit64',
'pool',
'devtools',
'data.table'
)
load_packages <- function(pkgs = pkgs_required, install = TRUE){
if (install) {
packages_to_install = pkgs[!(pkgs %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install)
}
}
sapply(pkgs, require, character.only = TRUE)
}
load_packages()
library(leaflet)
pkgs <- c('data.table','reshape2','grid','dplyr','bit64','lubridate','classInt','stringi','devtools','scales','ggthemes','ggforce','GGally','ggjoy','corrplot','ggimage','colortools','viridis','showtext','fields','RColorBrewer','OpenStreetMap','leafletCN','mapview','baidumap','trajectories','ggmap','sf','geosphere','rgdal','rgeos','raster','maptools','sp','hexbin','zoo','lintr','jsonlite','animation','randomForest','mice','descr','psych','car','Hmisc','corrplot','MASS','rpart','mice','DMwR','glmnet','xgboost','randomForest','Metrics','caret','e1071','rpart.plot','rlist','Matrix','digest','purrr','tidyverse','gridExtra','RCurl','hrbrthemes','bit64','DT')
load_packages(pkgs)
local = FALSE
force = FALSE
restart = FALSE
suppressMessages(require(devtools))
suppressMessages(require(config))
install.packages('config')
config
start <- Sys.time()
message(paste(start,"| Started installation..."))
message(paste(Sys.time(), "| Duration:", round(difftime(Sys.time(), start, units = "secs"), 2), "s"))
local = FALSE
force = FALSE
restart = FALSE
# suppressMessages(require(devtools))
# suppressMessages(require(config))
load_packages(c('devtools', 'config'))
from='google'
message(paste("Not a valid 'from' value. Try any of the following:\n", paste(shQuote(froms), collapse="\n ")))
message(paste("Not a valid 'from' value. Try any of the following:\n", paste(shQuote(from), collapse="\n ")))
filename="config.yml"
file <- paste0('~',"/",filename)
file
froms <- c("dummy",
"production",
"warehouse",
"sendgrid",
"redshift",
"hubspot",
"github",
"bitbucket",
"typeform",
"google_api",
"google_analytics_somosf1",
"google_analytics_comparamejor",
"twitter")
from <- 'git_hub'
from %in% froms
from
froms
from <- 'github'
from %in% froms
!file.exists(file)
config::get(from)
config::get(from)
credentials <- config::get(from)
credentials
config::get(from)
from
config::get(from)
system('cat ~/config.yml')
config::get(file = '~/config.yml')
require(rtweet)
c <- config::get('presto_nm', file = '~/config.yml')
config::get('presto_nm', file = '~/config.yml')
c <- config::get('presto_nm', file = '~/config.yml')
c <- config::get('presto_nm', file = '~/config.yml')
c
config::get('presto_nm', file = '~/config.yml')
config::get('github', file = '~/config.yml')
config::get('github', file = '~/config.yml')
config::get('github', file = '~/config.yml')
config::get('github', file = '~/config.yml')
config::get('github', file = '~/config.yml')
config::get(from, file = '~/config.yml')
get('git')
get('github')
get('github', '~/config.yml')
get('github', file = '~/config.yml')
get('github', filename = '~/config.yml')
config::get('github', file = '~/config.yml')
config::get('github', file = '~/config_bak.yml')
config::get('github', file = 'Users/yaolin/config_bak.yml')
config::get('github', file = 'Users/yaolin/config_bak.yml')
config::get('test', file = 'Users/yaolin/config_bak.yml')
config::get('test', file = 'Users/yaolin/config_bak.yml')
config::get('test', file = 'Users/yaolin/config_bak.yml')
config::get('production', file = 'Users/yaolin/config_bak.yml')
setwd()
config::get(file = '~/config.yml')
config::get('github', file = '~/config.yml')
library(config)
config::get('github', 'User/yaolin/config.yml')
config::get('github', 'User/yaolin/config.yml')
config::get('github', 'User/yaolin/config.yml')
config::get('github', 'User/yaolin/config_bak.yml')
config::get('yaolin', 'User/yaolin/config_bak.yml')
config::get('test', 'User/yaolin/config_bak.yml')
config::get('test', file = 'User/yaolin/config_bak.yml')
config::get('github', file = 'User/yaolin/config_bak.yml')
config::get('github', file = 'User/yaolin/config_bak.yml')
config::get('github', file = 'User/yaolin/config_bak.yml')
system('cat  User/yaolin/config_bak.yml')
system('cat  /User/yaolin/config_bak.yml')
system('cat  Users/yaolin/config_bak.yml')
system('cat /Users/yaolin/config_bak.yml')
config::get('github', file = 'User/yaolin/config_bak.yml')
config::get('github', file = '/Users/yaolin/config_bak.yml')
setwd('~')
getwd()
config::get()
config::get("github")
config::get("github")
config::get("default")
?config::get
Sys.getenv("R_CONFIG_ACTIVE", "default")
config::get(, "github")
config::get(, "presto_nm")
config::get(value = NULL, config = "presto_nm")
config::get(value = NULL, config = "presto_nm", file = 'config.yml')
config::get(config = "presto_nm", file = 'config.yml')
config::get("presto_nm", file = 'config.yml')
config::get("trials", file = 'config.yml')
config::get()
Sys.getenv("R_CONFIG_ACTIVE", "default")
Sys.getenv("R_CONFIG_ACTIVE")
Sys.getenv()
Sys.getenv("R_CONFIG_ACTIVE", "default")
Sys.getenv("R_CONFIG_ACTIVE", "github")
config::get(, config = Sys.getenv("R_CONFIG_ACTIVE", "github"), file = 'config.yml')
config::get(, config = Sys.getenv("R_CONFIG_ACTIVE", "presto_md"), file = 'config.yml')
config::get(, config = Sys.getenv("R_CONFIG_ACTIVE", "presto_nm"), file = 'config.yml')
config::get(, config = Sys.getenv("R_CONFIG_ACTIVE", "presto"), file = 'config.yml')
config::get(, config = Sys.getenv("R_CONFIG_ACTIVE", "presto_md"), file = 'config.yml')
config::get(, config = Sys.getenv("R_CONFIG_ACTIVE", "presto_nm"), file = 'config.yml')
config::get(value = "port", config = Sys.getenv("R_CONFIG_ACTIVE", "presto_nm"), file = 'config.yml')
config::get(value = "port", config = Sys.getenv("R_CONFIG_ACTIVE", "github"), file = 'config.yml')
Sys.getenv()
?Sys.getenv
Sys.getenv("R_CONFIG_FILE", "config.yml")
Sys.getenv("R_CONFIG_ACTIVE", "default")
Sys.getenv("R_CONFIG_ACTIVE", "github")
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "default"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "default"),
file = Sys.getenv("R_CONFIG_FILE", "config_bak.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github"),
file = Sys.getenv("R_CONFIG_FILE", "config_bak.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github"),
file = Sys.getenv("R_CONFIG_FILE", "config_bak.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github2"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "github2"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(value = NULL, config = Sys.getenv("R_CONFIG_ACTIVE", "presto_nm"),
file = Sys.getenv("R_CONFIG_FILE", "config.yml"), use_parent = TRUE)
get(config = 'presto_nm')
get('presto_nm')
c <- config::get(config = 'presto', file = '~/config.yml')
c
connect_presto <- function(server_name = "nm",
db_type = "dbi") {
c <- config::get(config = 'presto', file = '~/config.yml')
hostip <- sprintf("http://%s",
ifelse(server_name == "nm", c$host_nm,
c$host_md))
if (db_type == "dbi") {
DBI::dbConnect(
drv = RPresto::Presto(),
host = hostip,
port = c$port,
user = c$user,
password = c$password,
schema = c$schema,
catalog = c$catalog
)
} else {
pool::dbPool(
drv = RPresto::Presto(),
host = hostip,
port = c$port,
user = c$user,
password = c$password,
schema = c$schema,
catalog = c$catalog
)
}
}
db <- connect_presto()
dbGetQuery(db, 'select 787')
server_name = "nm"
db_type = "dbi"
server_type = "nm"
db_type = "dbi"
c <- config::get(config = 'presto', file = '~/config.yml')
c
hostip <- sprintf("http://%s",
ifelse(server_type == "nm", c$host_nm,
c$host_md))
hostip
if (db_type == "dbi") {
DBI::dbConnect(
drv = RPresto::Presto(),
host = hostip,
port = c$port,
user = c$user,
password = c$password,
schema = c$schema,
catalog = c$catalog
)
} else {
pool::dbPool(
drv = RPresto::Presto(),
host = hostip,
port = c$port,
user = c$user,
password = c$password,
schema = c$schema,
catalog = c$catalog
)
}
db <- connect_presto()
BDI::dbGetQuery(db, 'select 787')
DBI::dbGetQuery(db, 'select 787')
schema_name = NA_character_
is.na(schema_name)
c$schema
schema_name
library(RYLin)
devtools::install_github()
devtools::install_github('iyaolin/RYLin')
library(RYLin)
update_RYLin()
con <- connect_presto()
DBI::dbGetQuery('select 10*23')
DBI::dbGetQuery("select 10*23")
DBI::dbGetQuery("select 1023")
DBI::dbGetQuery(con, "select 1023")
load_packages()
connect_enver <- function(
c <- config::get(config = 'enver', file = '~/config.yml')
)
c <- config::get(config = 'enver', file = '~/config.yml')
c <- config::get(config = 'enver', file = '~/config.yml')
c
pool <- pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
install.packages("RPostgreSQL")
library(pool)
pool <- pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
pool %>%
tbl(enver_daily_report) %>%
head(5)
pool %>%
tbl(enver_daily_report) %>%
head(5)
pool
pool %>%
tbl('enver_daily_report') %>%
head(5)
pool %>%
tbl('enver_daily_report') %>%
filter(lang = 1 & tdate >= '2018-07-01' & product_category = -1) %>%
select(tdate, cnt_finish_order)
pool %>%
tbl('enver_daily_report') %>%
filter(lang = 1 & tdate >= '2018-07-01' & product_category = -1) %>%
head(5)
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1) %>%
head(5)
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1 & city_id == 'all') %>%
# head(5)
select(tdate, cnt_finish_order)
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1 & city_id == 'all') %>%
# head(5)
select(tdate, cnt_finish_order) %>%
arange(desc(tdate))
pool %>%
tbl('enver_daily_report') %>%
filter(lang == 1 & tdate >= '2018-07-01' & product_category == -1 & city_id == 'all') %>%
# head(5)
select(tdate, cnt_finish_order) %>%
arrange(desc(tdate))
connect_enver <- function(db_type = "dbi"){
c <- config::get(config = 'enver', file = '~/config.yml')
# pool <- pool::dbPool(
#   drv = RPostgreSQL::PostgreSQL(),
#   dbname = c$dbname,
#   host = c$host,
#   user = c$user,
#   password = c$password
# )
if (db_type == "dbi") {
DBI::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
} else {
pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
}
}
connect_enver <- function(db_type = "dbi"){
c <- config::get(config = 'enver', file = '~/config.yml')
# pool <- pool::dbPool(
#   drv = RPostgreSQL::PostgreSQL(),
#   dbname = c$dbname,
#   host = c$host,
#   user = c$user,
#   password = c$password
# )
if (db_type == "dbi") {
DBI::dbConnect(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
} else {
pool::dbPool(
drv = RPostgreSQL::PostgreSQL(),
dbname = c$dbname,
host = c$host,
user = c$user,
password = c$password
)
}
}
con <- connect_enver()
DBI::dbGetQuery(con, 'select 787')
library(RYLin)
devtools::install_github("laresbernardo/lares")
devtools::install_github("laresbernardo/lares")
?install_github
devtools::install_github("iyaolin/RYLin")
getwd()
